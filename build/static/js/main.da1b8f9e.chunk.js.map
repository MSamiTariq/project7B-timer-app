{"version":3,"sources":["components/Button/Button.tsx","components/Timer/Timer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["cName","Button","functionality","buttonValue","className","onClick","Timer","useState","timerSeconds","setTimerSeconds","timerMinutes","setTimerMinutes","timerHours","setTimerHours","timerStart","setTimerStart","timerStop","setTimerStop","resetTimer","useEffect","interval","setInterval","clearInterval","slice","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAQIA,E,oDAkBWC,G,MAhBiB,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,cAAeC,EAAkB,EAAlBA,YAW9C,MAToB,UAAhBA,IACAH,EAAQ,SAEQ,SAAhBG,IACAH,EAAQ,QAEQ,UAAhBG,IACAH,EAAQ,SAGJ,4BAAQI,UAAWJ,EAAOK,QAASH,GAAgBC,K,MCyDhDG,MA1Ef,WAAiB,MACyBC,mBAAiB,GAD1C,mBACRC,EADQ,KACMC,EADN,OAEyBF,mBAAS,GAFlC,mBAERG,EAFQ,KAEMC,EAFN,OAGqBJ,mBAAS,GAH9B,mBAGRK,EAHQ,KAGIC,EAHJ,OAIqBN,oBAAS,GAJ9B,mBAIRO,EAJQ,KAIIC,EAJJ,OAKmBR,oBAAS,GAL5B,mBAKRS,EALQ,KAKGC,EALH,KAQf,SAASC,IACPT,EAAgB,GAChBE,EAAgB,GAChBE,EAAc,GACdE,GAAc,GACdE,GAAa,GAsCf,OA1BAE,qBAAU,WACR,IAAIC,EAsBJ,OArBIN,EACFM,EAAWC,aAAY,WACjBT,EAAa,GACfM,IAEwB,KAAjBV,GACPG,EAAgBD,EAAe,GAC/BD,EAAgB,IAEQ,KAAjBC,GACPG,EAAcD,EAAa,GAC3BD,EAAgB,IAGhBF,EAAgBD,EAAe,KAEhC,KAEKM,GAA+B,IAAjBN,GACtBc,cAAcF,GAET,kBAAME,cAAcF,MAC1B,CAACN,EAAYE,EAAWR,IAGzB,6BACE,yBAAKJ,UAAU,kBAAkB,IAAMQ,GAAYW,OAAO,GAA1D,OAAkE,IAAMb,GAAca,OAAO,GAA7F,OAAqG,IAAMf,GAAce,OAAO,IAChI,yBAAKnB,UAAW,UACd,kBAAC,EAAD,CACEF,cAxCR,WACEa,GAAc,GACdE,GAAa,IAuCPd,YAAY,UAGd,kBAAC,EAAD,CACED,cAzCR,WACEa,GAAc,GACdE,GAAa,IAwCPd,YAAY,SAGd,kBAAC,EAAD,CACED,cAAegB,EACff,YAAY,aC5DPqB,MARf,WACE,OACE,yBAAKpB,UAAU,OACb,kBAAC,EAAD,QCKcqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.da1b8f9e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Button.modules.css';\r\n\r\ntype Props = {\r\n    functionality: () => void;\r\n    buttonValue: string;\r\n}\r\n\r\nlet cName: string;\r\n\r\nconst Button: React.FC<Props> = ({ functionality, buttonValue }) => {\r\n\r\n    if (buttonValue === 'Start') {\r\n        cName = 'start'\r\n    }\r\n    if (buttonValue === 'Stop') {\r\n        cName = 'stop'\r\n    }\r\n    if (buttonValue === 'reset') {\r\n        cName = 'reset'\r\n    }\r\n    return (\r\n            <button className={cName} onClick={functionality}>{buttonValue}</button>\r\n    )\r\n}\r\n\r\nexport default Button","import React, { useState, useEffect } from 'react';\r\nimport Button from '../Button/Button';\r\nimport './Timer.modules.css';\r\n\r\n\r\nfunction Timer() {;\r\n  const [timerSeconds, setTimerSeconds] = useState<number>(0);\r\n  const [timerMinutes, setTimerMinutes] = useState(0);\r\n  const [timerHours, setTimerHours] = useState(0);\r\n  const [timerStart, setTimerStart] = useState(false);\r\n  const [timerStop, setTimerStop] = useState(true);\r\n\r\n\r\n  function resetTimer() {\r\n    setTimerSeconds(0)\r\n    setTimerMinutes(0)\r\n    setTimerHours(0)\r\n    setTimerStart(false)\r\n    setTimerStop(true)\r\n  }\r\n\r\n  function StartTimer() {\r\n    setTimerStart(true);\r\n    setTimerStop(false);\r\n  }\r\n  function StopTimer() {\r\n    setTimerStart(false);\r\n    setTimerStop(true);\r\n  }\r\n\r\n  useEffect(() => {\r\n    let interval: any;\r\n    if (timerStart) {\r\n      interval = setInterval(() => {\r\n        if (timerHours > 90) {\r\n          resetTimer()\r\n        }\r\n        else if (timerSeconds === 59) {\r\n          setTimerMinutes(timerMinutes + 1)\r\n          setTimerSeconds(0)\r\n        }\r\n        else if (timerMinutes === 59) {\r\n          setTimerHours(timerHours + 1)\r\n          setTimerMinutes(0)\r\n        }\r\n        else {\r\n          setTimerSeconds(timerSeconds + 1)\r\n        }\r\n      }, 1000)\r\n    }\r\n    else if (!timerStart && timerSeconds !== 0) {\r\n      clearInterval(interval)\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [timerStart, timerStop, timerSeconds])\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"timer-display\">{(\"0\" + timerHours).slice(-2)} : {(\"0\" + timerMinutes).slice(-2)} : {(\"0\" + timerSeconds).slice(-2)}</div>\r\n      <div className= \"button\">\r\n        <Button\r\n          functionality={StartTimer}\r\n          buttonValue=\"Start\"\r\n        />\r\n\r\n        <Button\r\n          functionality={StopTimer}\r\n          buttonValue=\"Stop\"\r\n        />\r\n\r\n        <Button\r\n          functionality={resetTimer}\r\n          buttonValue=\"Reset\"\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Timer;","import React from 'react';\nimport './App.css';\nimport Timer from './components/Timer/Timer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}